@startuml
class BankCard {
    + ValidBefore : Month <<get>>
    + BankCard(validBefore:Month)
    + <<override>> Withdraw(currency:Currency, amount:decimal) : decimal
}
Money <|-- BankCard
class Cash {
}
class Currency <<sealed>> {
    + Symbol : string <<get>>
    + Currency(symbol:string)
    + {static} USD : Currency <<get>>
    + {static} EUR : Currency <<get>>
    + {static} JPY : Currency <<get>>
    + <<override>> Equals(obj:object) : bool
    + Equals(other:Currency) : bool
    + <<override>> GetHashCode() : int
}
"IEquatable`1" "<Currency>" <|-- Currency
class Date <<sealed>> {
    - Value : DateTime <<get>>
    + Date(year:int, month:int, day:int)
    + CompareTo(other:DateTime) : int
    + <<override>> Equals(obj:object) : bool
    + Equals(other:Date) : bool
    + <<override>> GetHashCode() : int
}
"IEquatable`1" "<Date>" <|-- Date
"IComparable`1" "<DateTime>" <|-- Date
class FixedMoney {
    + Currency : Currency <<get>>
    + Amount : decimal <<get>>
    # FixedMoney(currency:Currency, amount:decimal)
    + <<override>> Withdraw(currency:Currency, amount:decimal) : decimal
}
Money <|-- FixedMoney
class GiftCard {
    + ValidBefore : Date <<get>>
    + GiftCard(currency:Currency, amount:decimal, validBefore:Date)
    + <<override>> Withdraw(currency:Currency, amount:decimal) : decimal
}
FixedMoney <|-- GiftCard
abstract class Money {
    + {abstract} Withdraw(currency:Currency, amount:decimal) : decimal
}
class Month <<sealed>> {
    - Value : DateTime <<get>>
    + Month(year:int, month:int)
    + CompareTo(other:DateTime) : int
    + <<override>> Equals(obj:object) : bool
    + Equals(other:Month) : bool
    + <<override>> GetHashCode() : int
}
"IEquatable`1" "<Month>" <|-- Month
"IComparable`1" "<DateTime>" <|-- Month
class Program {
    {static} Main(args:string[]) : void
}
class Wallet {
}
@enduml
